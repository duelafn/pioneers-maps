#!/usr/bin/perl -w
# This module is Copyright (c) 2013 Dean Serenevy. All rights reserved.
#
# You may distribute under the terms of either the GNU General Public License
# or the Artistic License, as specified in the Perl README file.
use strict; use warnings; use 5.010;

use Getopt::Long qw/:config bundling/;
use Hash::Util qw/ lock_keys /;
our $VERSION = '0.5.1';

our %OPT = ( trials => 20 );
our @OPT_SPEC =
qw/ help|h version noact|no-act|dry-run DEBUG
    output|o=s title|t=s
    trials=i
  /;
sub USAGE { <<"__USAGE__" };
usage: $_[0] [options] ACTION ARG(S)

ACTIONS

  $_[0] shuffle FILENAME

    Performs a "weak" randomization of an existing file.

      - permutes ports (without moving any)
      - permutes land haxes (including gold or deserts)
      - permutes chits (enforces the no adjacent 6 or 8 rule)

  $_[0] randomize FILENAME

    Performs a "strong" randomization of an existing file.

      - removes all "nosetup" vertices
      - generates new chits following a statistically optimal distribution
      - shuffles all hexes purely randomly
      - shuffles chits (enforcing the no adjacent 6 or 8 rule)
      - randomize ports and ensures they connect to land

OPTIONS

 --title, -t <name>   set name of output map (default, keep same)

 --trials <n>         number trials if randomization is invalid (default: $OPT{trials})
__USAGE__

use lib 'lib';
use Path::Class;
use Pioneers::Config;
use Pioneers::Util qw/ random_chits chit_deviation /;

our %ACTIONS; sub action;
action help => sub { usage() };


action shuffle => sub {
    my ($action, $file) = @_;

    my $config = Pioneers::Config->load($file);
    my $rv;
    my $trials = $OPT{trials};
    eval { $rv = $config->shuffle_map } while !$rv and $trials-- > 0;
    die "Unable to shuffle map under current conditions!\n" unless $rv;
    for my $hex ($config->map->hexes) {
        $hex->pin($hex->type() =~ /d|g/) if $hex;
    }
    $config->title($OPT{title}) if $OPT{title};
    say { output() } $config->to_map_string;
};

action randomize => sub {
    my ($action, $file) = @_;

    my $config = Pioneers::Config->load($file);
    $config->nosetup([]);

    my $N = $OPT{trials};
    for (1..$N) {
        last if eval {
            $config->chits([ random_chits($config->map->nr_chits, ensure_all_numbers => 1, best_of => 50) ]);
            $config->randomize_hexes({ keep_sea_border => 1 }, "hex");
            $config->randomize_chits;
            $config->randomize_ports({ allow_crossings => 1 });
            1;
        };
        warn "Unable to produce good distribution: $@\n" if $_ == $N;
    }

    $config->random_terrain(0);
    $config->title($OPT{title}) if $OPT{title};
    say { output() } $config->to_map_string;
};



get_options( \%OPT, @OPT_SPEC );
call_action( @ARGV );


sub action {
    my $name = shift;
    $name = [ $name ] unless ref($name);
    unshift @_, "-action" if 1 == @_;
    my %a = @_;
    $a{-name} //= $$name[0];

    $ACTIONS{$_} = \%a for @$name;
}

sub call_action {
    my $name = shift // "";
    usage("No such action $name") unless exists $ACTIONS{$name};
    my $action = $ACTIONS{$name};

    my @arg = @_;
    @arg = $$action{-build_args}->( $action, @_ ) if $$action{-build_args};

    $$action{-action}->( $action, @arg );
}

sub output {
    return \*STDOUT unless $OPT{output};
    open my $F, ">", $OPT{output} or die "Error writing to $OPT{output}: $!";
    return $F;
}

sub get_options {
    my $OPT = shift;
    GetOptions $OPT, @_ or usage(1);
    usage() if $$OPT{help} || $$OPT{version};
    lock_keys(%$OPT, keys %$OPT, map /^(\w+)/, @_);
}

sub usage {
    my $status = (@_ && $_[0] =~ /^\d+$/) ? shift(@_) : 0+@_;
    print @_, "\n" if @_;
    require File::Spec; my $exe = (File::Spec->splitpath($0))[2];
    $OPT{$_} = $OPT{$_} ? "enabled" : "disabled" for map /^(\w+).*!/, @OPT_SPEC;
    print $OPT{version} ? "$exe version $VERSION\n" : USAGE($exe);
    exit $status;
}
